!function(){"use strict";class e{constructor(e,t,s,i,n){let{name:o,link:r,_id:a,isLiked:l}=e;this.name=o,this.link=r,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteIconClick=i,this.id=a,this._handleLikeButtonClick=n,this._isLiked=l}_setEventListeners(){this._likeButton=this._element.querySelector(".card__like-button"),this._likeButton.addEventListener("click",(()=>{this._handleLikeButtonClick(this)})),this._cardImage=this._element.querySelector(".card__image"),this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this)})),this._element.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteIconClick(this)}))}handleLikeButton(e){this._isLiked=e,this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}checkLike(){return this._isLiked}handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}_getTemplate(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardElement}getCard(){return this._element=this._getTemplate(),this._setEventListeners(),this._cardImage.src=this.link,this._cardImage.alt=this.name,this._element.querySelector(".card__text").textContent=this.name,this.handleLikeButton(this._isLiked),this._element}}class t{constructor(e,t){let{inputSelector:s,submitButtonSelector:i,inactiveButtonClass:n,inputErrorClass:o,errorClass:r}=e;this._inputSelector=s,this._submitButtonSelector=i,this._inactiveButtonClass=n,this._inputErrorClass=o,this._errorClass=r,this._form=t}_toggleButtonState(){this._inputIsInvalid(this._inputList)?this._disableButton():this._enableButton()}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_inputIsInvalid(e){return!e.every((e=>e.validity.valid))}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputList.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this._disableButton()})),this._setEventListeners()}}class s{constructor(e){let{popupSelector:t}=e;this._popup=document.querySelector(t)}_handleEscapeClose=e=>{"Escape"===e.key&&this.close()};open(){this._popup.classList.add("modal_open"),document.addEventListener("keydown",this._handleEscapeClose)}close(){this._popup.classList.remove("modal_open"),document.removeEventListener("keydown",this._handleEscapeClose)}setEventListeners(){this._popup.addEventListener("click",(e=>{(e.target.classList.contains("modal_open")||e.target.classList.contains("modal__close"))&&this.close()}))}}var i=class extends s{constructor(e,t){super({popupSelector:e}),this._handleFormSubmit=t,this._submitButton=this._popup.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){return this._inputs=this._popup.querySelectorAll(".modal__input"),this._inputValues={},this._inputs.forEach((e=>{this._inputValues[e.name]=e.value})),this._inputValues}setEventListeners(){this._form=this._popup.querySelector(".modal__form"),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),e.target.reset()})),super.setEventListeners()}handleLoad(e,t){e?(this._submitButton.textContent=t,console.log("loading"),console.log(this._submitButton)):this._submitButton.textContent=this._submitButtonText}};const n={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};document.querySelector("#profile-modal-close"),document.querySelector(".profile__name"),document.querySelector(".profile__discriptor");const o=document.querySelector("#profile-name-input"),r=document.querySelector("#profile-descriptor-input"),a=(document.querySelector("#edit-modal"),document.querySelector("#card-template").content.firstElementChild,document.querySelector(".cards__list")),l=(document.querySelector("#add-card-modal"),document.querySelector(".profile__add-button")),c=(document.querySelector("#card-modal-close"),document.querySelector("#add-card-modal-form")),d=(c.querySelector("#card-link-input"),c.querySelector("#card-title-input"),document.querySelector("#image-preview-modal"),document.querySelectorAll(".modal__close"),document.querySelectorAll(".modal"),document.querySelector(".modal__card-image"),document.querySelector(".modal__image-description"),document.querySelector(".profile__edit-button")),u=(document.querySelector(".card__delete-button"),document.querySelector(".profile__image-modal")),h=document.querySelector("#update-profile-image-modal-form");d.addEventListener("click",(function(){const e=y.getUserInfo();o.value=e.name,r.value=e.job,v.open()}));const _=document.querySelector(".modal__form");function m(e){E.open(),E.setSubmitAction((()=>{C.deleteCard(e.id).then((()=>{e.handleDeleteCard(),E.close()})).catch((e=>{console.error(e)}))}))}function p(t){return new e(t,"#card-template",b,m,f).getCard(t)}function f(e){e.checkLike()?C.removeLike(e.id).then((()=>{e.handleLikeButton(e.isLiked)})).catch((e=>{console.error(e)})):C.likeCard(e.id).then((t=>{e.isLiked=t.isLiked,e.handleLikeButton(e.isLiked)})).catch((e=>{console.error(e)}))}function b(e){L.open(e)}l.addEventListener("click",(function(){S.open()})),u.addEventListener("click",(function(){g.open()})),new t(n,_).enableValidation(),new t(n,c).enableValidation(),new t(n,h).enableValidation();const k=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._cardList=t}setItem(e){this._cardList.prepend(e)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}}({renderer:e=>{const t=p(e);k.setItem(t)}},a),L=new class extends s{constructor(e){super({popupSelector:e}),this._modalImage=this._popup.querySelector(".modal__card-image"),this._modalDescription=this._popup.querySelector(".modal__image-description")}open(e){let{name:t,link:s}=e;this._modalImage.src=s,this._modalImage.alt=t,this._modalDescription.textContent=t,super.open()}}("#image-preview-modal");L.setEventListeners();const S=new i("#add-card-modal",(function(e){S.handleLoad(!0,"Saving..."),C.addCard({name:e.title,link:e.link}).then((e=>{const t=p(e);k.setItem(t),c.reset(),S.close()})).catch((e=>{console.error(e)})).finally((()=>{S.handleLoad(!1)}))}));S.setEventListeners();const v=new i("#edit-modal",(function(e){let{name:t,discriptor:s}=e;v.handleLoad(!0,"Saving..."),C.updateUserInfo(t,s).then((e=>{console.log(e),y.setUserInfo({name:t,about:s}),v.close()})).catch((e=>{console.error(e)})).finally((()=>{v.handleLoad(!1)}))}));v.setEventListeners();const g=new i("#update-profile-image-modal",(function(e){g.handleLoad(!0,"Saving..."),C.updateProfilePicture(e.image).then((()=>{y.setProfileImage(e.image),g.close()})).catch((e=>{console.error(e)})).finally((()=>{g.handleLoad(!1)}))}));g.setEventListeners();const y=new class{constructor(e){let{name:t,job:s,profileImage:i}=e;this._name=document.querySelector(t),this._job=document.querySelector(s),this._profileImage=document.querySelector(i)}getUserInfo(){return{name:this._name.textContent,job:this._job.textContent}}setUserInfo(e){let{name:t,about:s}=e;this._name.textContent=t,this._job.textContent=s}setProfileImage(e){this._profileImage.src=e,console.log(this._profileImage.src)}}({job:".profile__discriptor",name:".profile__name",profileImage:".profile__image"}),E=new class extends s{constructor(e){super({popupSelector:e})}setSubmitAction(e){this.handleYesButtonClick=e}setEventListeners(){this._button=this._popup.querySelector(".modal__button"),this._button.addEventListener("click",(e=>{e.preventDefault(),this.handleYesButtonClick()})),super.setEventListeners()}}("#delete-card-modal",(function(){E.close()}));E.setEventListeners();const C=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInfo(){return fetch(this._baseUrl+"/users/me",{headers:this._headers}).then(this._checkResponse)}getInitialCards(){return fetch(this._baseUrl+"/cards",{headers:this._headers}).then(this._checkResponse)}updateUserInfo(e,t){return fetch(this._baseUrl+"/users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkResponse)}addCard(e){let{name:t,link:s}=e;return fetch(this._baseUrl+"/cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}updateProfilePicture(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"407bded7-957f-4e30-ba1d-3d3bf66c7e41","Content-Type":"application/json"}});C.getUserInfo().then((e=>{console.log(e),y.setUserInfo(e),y.setProfileImage(e.avatar)})).catch((e=>{console.log(e)})),C.getInitialCards().then((e=>{console.log(e),k.renderItems(e)})).catch((e=>{console.error(e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,